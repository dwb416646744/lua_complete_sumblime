
    {
        "scope": "source.lua - keyword.control.lua - constant.language.lua - string",

        "completions":
        [
            "in", "else", "return", "false", "true", "break", "or", "and",
		 { "trigger": "network.isLocalWiFiAvailable()", "contents": "network.isLocalWiFiAvailable()" },
		 { "trigger": "network.isInternetConnectionAvailable()", "contents": "network.isInternetConnectionAvailable()" },
		 { "trigger": "network.isHostNameReachable(hostname)", "contents": "network.isHostNameReachable(${1:hostname})" },
		 { "trigger": "network.getInternetConnectionStatus()", "contents": "network.getInternetConnectionStatus()" },
		 { "trigger": "network.createHTTPRequest(callback,url,method)", "contents": "network.createHTTPRequest(${1:callback},${2:url},${3:method})" },
		 { "trigger": "display.setTexturePixelFormat(filename,format)", "contents": "display.setTexturePixelFormat(${1:filename},${2:format})" },
		 { "trigger": "display.newScene(name)", "contents": "display.newScene(${1:name})" },
		 { "trigger": "display.wrapSceneWithTransition(scene,transitionType,time,more)", "contents": "display.wrapSceneWithTransition(${1:scene},${2:transitionType},${3:time},${4:more})" },
		 { "trigger": "display.replaceScene(newScene,transitionType,time,more)", "contents": "display.replaceScene(${1:newScene},${2:transitionType},${3:time},${4:more})" },
		 { "trigger": "display.getRunningScene()", "contents": "display.getRunningScene()" },
		 { "trigger": "display.pause()", "contents": "display.pause()" },
		 { "trigger": "display.resume()", "contents": "display.resume()" },
		 { "trigger": "display.newLayer()", "contents": "display.newLayer()" },
		 { "trigger": "display.newNode()", "contents": "display.newNode()" },
		 { "trigger": "display.newClippingRegionNode(rect)", "contents": "display.newClippingRegionNode(${1:rect})" },
		 { "trigger": "display.newSprite(filename,x,y)", "contents": "display.newSprite(${1:filename},${2:x},${3:y})" },
		 { "trigger": "display.newBackgroundSprite(filename)", "contents": "display.newBackgroundSprite(${1:filename})" },
		 { "trigger": "display.newBackgroundTilesSprite(filename)", "contents": "display.newBackgroundTilesSprite(${1:filename})" },
		 { "trigger": "display.newCircle(radius)", "contents": "display.newCircle(${1:radius})" },
		 { "trigger": "display.newRect(width,height)", "contents": "display.newRect(${1:width},${2:height})" },
		 { "trigger": "display.newPolygon(points,scale)", "contents": "display.newPolygon(${1:points},${2:scale})" },
		 { "trigger": "display.align(target,anchorPoint,x,y)", "contents": "display.align(${1:target},${2:anchorPoint},${3:x},${4:y})" },
		 { "trigger": "display.pixels(x,y)", "contents": "display.pixels(${1:x},${2:y})" },
		 { "trigger": "display.addSpriteFramesWithFile(plistFilename,image)", "contents": "display.addSpriteFramesWithFile(${1:plistFilename},${2:image})" },
		 { "trigger": "display.removeSpriteFramesWithFile(plistFilename,imageName)", "contents": "display.removeSpriteFramesWithFile(${1:plistFilename},${2:imageName})" },
		 { "trigger": "display.removeSpriteFrameByImageName(imageName)", "contents": "display.removeSpriteFrameByImageName(${1:imageName})" },
		 { "trigger": "display.newBatchNode(image,capacity)", "contents": "display.newBatchNode(${1:image},${2:capacity})" },
		 { "trigger": "display.newSpriteFrame(frameName)", "contents": "display.newSpriteFrame(${1:frameName})" },
		 { "trigger": "display.newSpriteWithFrame(frame,x,y)", "contents": "display.newSpriteWithFrame(${1:frame},${2:x},${3:y})" },
		 { "trigger": "display.newFrames(pattern,begin,length,isReversed)", "contents": "display.newFrames(${1:pattern},${2:begin},${3:length},${4:isReversed})" },
		 { "trigger": "display.newAnimation(frames,time)", "contents": "display.newAnimation(${1:frames},${2:time})" },
		 { "trigger": "display.newAnimate(animation)", "contents": "display.newAnimate(${1:animation})" },
		 { "trigger": "display.sizeInPixels", "contents": "display.sizeInPixels" },
		 { "trigger": "display.contentScaleFactor", "contents": "display.contentScaleFactor" },
		 { "trigger": "display.size", "contents": "display.size" },
		 { "trigger": "display.width", "contents": "display.width" },
		 { "trigger": "display.height", "contents": "display.height" },
		 { "trigger": "display.cx", "contents": "display.cx" },
		 { "trigger": "display.cy", "contents": "display.cy" },
		 { "trigger": "display.c_left", "contents": "display.c_left" },
		 { "trigger": "display.c_right", "contents": "display.c_right" },
		 { "trigger": "display.c_top", "contents": "display.c_top" },
		 { "trigger": "display.c_bottom", "contents": "display.c_bottom" },
		 { "trigger": "display.left", "contents": "display.left" },
		 { "trigger": "display.right", "contents": "display.right" },
		 { "trigger": "display.top", "contents": "display.top" },
		 { "trigger": "display.bottom", "contents": "display.bottom" },
		 { "trigger": "display.widthInPixels", "contents": "display.widthInPixels" },
		 { "trigger": "display.heightInPixels", "contents": "display.heightInPixels" },
		 { "trigger": "display.widthInPixels", "contents": "display.widthInPixels" },
		 { "trigger": "display.heightInPixels", "contents": "display.heightInPixels" },
		 { "trigger": "display.contentScaleFactor", "contents": "display.contentScaleFactor" },
		 { "trigger": "display.width", "contents": "display.width" },
		 { "trigger": "display.height", "contents": "display.height" },
		 { "trigger": "display.cx", "contents": "display.cx" },
		 { "trigger": "display.cy", "contents": "display.cy" },
		 { "trigger": "display.left", "contents": "display.left" },
		 { "trigger": "display.right", "contents": "display.right" },
		 { "trigger": "display.top", "contents": "display.top" },
		 { "trigger": "display.bottom", "contents": "display.bottom" },
		 { "trigger": "display.c_left", "contents": "display.c_left" },
		 { "trigger": "display.c_right", "contents": "display.c_right" },
		 { "trigger": "display.c_top", "contents": "display.c_top" },
		 { "trigger": "display.c_bottom", "contents": "display.c_bottom" },
		 { "trigger": "display.COLOR_WHITE", "contents": "display.COLOR_WHITE" },
		 { "trigger": "display.COLOR_BLACK", "contents": "display.COLOR_BLACK" },
		 { "trigger": "display.CENTER", "contents": "display.CENTER" },
		 { "trigger": "display.LEFT_TOP", "contents": "display.LEFT_TOP" },
		 { "trigger": "display.TOP_LEFT", "contents": "display.TOP_LEFT" },
		 { "trigger": "display.CENTER_TOP", "contents": "display.CENTER_TOP" },
		 { "trigger": "display.TOP_CENTER", "contents": "display.TOP_CENTER" },
		 { "trigger": "display.RIGHT_TOP", "contents": "display.RIGHT_TOP" },
		 { "trigger": "display.TOP_RIGHT", "contents": "display.TOP_RIGHT" },
		 { "trigger": "display.CENTER_LEFT", "contents": "display.CENTER_LEFT" },
		 { "trigger": "display.LEFT_CENTER", "contents": "display.LEFT_CENTER" },
		 { "trigger": "display.CENTER_RIGHT", "contents": "display.CENTER_RIGHT" },
		 { "trigger": "display.RIGHT_CENTER", "contents": "display.RIGHT_CENTER" },
		 { "trigger": "display.BOTTOM_LEFT", "contents": "display.BOTTOM_LEFT" },
		 { "trigger": "display.LEFT_BOTTOM", "contents": "display.LEFT_BOTTOM" },
		 { "trigger": "display.BOTTOM_RIGHT", "contents": "display.BOTTOM_RIGHT" },
		 { "trigger": "display.RIGHT_BOTTOM", "contents": "display.RIGHT_BOTTOM" },
		 { "trigger": "display.BOTTOM_CENTER", "contents": "display.BOTTOM_CENTER" },
		 { "trigger": "display.CENTER_BOTTOM", "contents": "display.CENTER_BOTTOM" },
		 { "trigger": "display.ANCHOR_POINTS", "contents": "display.ANCHOR_POINTS" },
		 { "trigger": "display.SCENE_TRANSITIONS", "contents": "display.SCENE_TRANSITIONS" },
		 { "trigger": "display.TEXTURES_PIXEL_FORMAT", "contents": "display.TEXTURES_PIXEL_FORMAT" },
		 { "trigger": "GameState.init(eventListener_,stateFilename_,secretKey_)", "contents": "GameState.init(${1:eventListener_},${2:stateFilename_},${3:secretKey_})" },
		 { "trigger": "GameState.load()", "contents": "GameState.load()" },
		 { "trigger": "GameState.save(newValues)", "contents": "GameState.save(${1:newValues})" },
		 { "trigger": "GameState.getGameStatePath()", "contents": "GameState.getGameStatePath()" },
		 { "trigger": "GameState.ERROR_INVALID_FILE_CONTENTS", "contents": "GameState.ERROR_INVALID_FILE_CONTENTS" },
		 { "trigger": "GameState.ERROR_HASH_MISS_MATCH", "contents": "GameState.ERROR_HASH_MISS_MATCH" },
		 { "trigger": "GameState.ERROR_STATE_FILE_NOT_FOUND", "contents": "GameState.ERROR_STATE_FILE_NOT_FOUND" },
		 { "trigger": "TestCell.ctor()", "contents": "TestCell.ctor()" },
		 { "trigger": "TestCell.onTap(x,y)", "contents": "TestCell.onTap(${1:x},${2:y})" },
		 { "trigger": "transition.execute(target,action,args)", "contents": "transition.execute(${1:target},${2:action},${3:args})" },
		 { "trigger": "transition.moveTo(target,args)", "contents": "transition.moveTo(${1:target},${2:args})" },
		 { "trigger": "transition.moveBy(target,args)", "contents": "transition.moveBy(${1:target},${2:args})" },
		 { "trigger": "transition.fadeIn(target,args)", "contents": "transition.fadeIn(${1:target},${2:args})" },
		 { "trigger": "transition.fadeOut(target,args)", "contents": "transition.fadeOut(${1:target},${2:args})" },
		 { "trigger": "transition.fadeTo(target,args)", "contents": "transition.fadeTo(${1:target},${2:args})" },
		 { "trigger": "transition.scaleTo(target,args)", "contents": "transition.scaleTo(${1:target},${2:args})" },
		 { "trigger": "transition.sequence(actions)", "contents": "transition.sequence(${1:actions})" },
		 { "trigger": "transition.playAnimationOnce(target,animation,removeWhenFinished,onComplete,delay)", "contents": "transition.playAnimationOnce(${1:target},${2:animation},${3:removeWhenFinished},${4:onComplete},${5:delay})" },
		 { "trigger": "transition.playAnimationForever(target,animation,isRestoreOriginalFrame,delay)", "contents": "transition.playAnimationForever(${1:target},${2:animation},${3:isRestoreOriginalFrame},${4:delay})" },
		 { "trigger": "transition.removeAction(action)", "contents": "transition.removeAction(${1:action})" },
		 { "trigger": "transition.stopTarget(target)", "contents": "transition.stopTarget(${1:target})" },
		 { "trigger": "transition.pauseTarget(target)", "contents": "transition.pauseTarget(${1:target})" },
		 { "trigger": "transition.resumeTarget(target)", "contents": "transition.resumeTarget(${1:target})" },
		 { "trigger": "CCSceneExtend.extend(target)", "contents": "CCSceneExtend.extend(${1:target})" },
		 { "trigger": "CCSceneExtend.addAutoCleanImage(imageName)", "contents": "CCSceneExtend.addAutoCleanImage(${1:imageName})" },
		 { "trigger": "CCSceneExtend.__index", "contents": "CCSceneExtend.__index" },
		 { "trigger": "CCLayerExtend.extend(target)", "contents": "CCLayerExtend.extend(${1:target})" },
		 { "trigger": "CCLayerExtend.addTouchEventListener(listener,isMultiTouches,priority,swallowsTouches)", "contents": "CCLayerExtend.addTouchEventListener(${1:listener},${2:isMultiTouches},${3:priority},${4:swallowsTouches})" },
		 { "trigger": "CCLayerExtend.removeTouchEventListener()", "contents": "CCLayerExtend.removeTouchEventListener()" },
		 { "trigger": "CCLayerExtend.addKeypadEventListener(listener)", "contents": "CCLayerExtend.addKeypadEventListener(${1:listener})" },
		 { "trigger": "CCLayerExtend.removeKeypadEventListener()", "contents": "CCLayerExtend.removeKeypadEventListener()" },
		 { "trigger": "CCLayerExtend.addScriptAccelerateHandler(listener)", "contents": "CCLayerExtend.addScriptAccelerateHandler(${1:listener})" },
		 { "trigger": "CCLayerExtend.removeScriptAccelerateHandler()", "contents": "CCLayerExtend.removeScriptAccelerateHandler()" },
		 { "trigger": "CCLayerExtend.__index", "contents": "CCLayerExtend.__index" },
		 { "trigger": "ScrollViewCell.onTouch(event,x,y)", "contents": "ScrollViewCell.onTouch(${1:event},${2:x},${3:y})" },
		 { "trigger": "ScrollViewCell.onTap(x,y)", "contents": "ScrollViewCell.onTap(${1:x},${2:y})" },
		 { "trigger": "ScrollViewCell.onExit()", "contents": "ScrollViewCell.onExit()" },
		 { "trigger": "ui.newMenu(items)", "contents": "ui.newMenu(${1:items})" },
		 { "trigger": "ui.newImageMenuItem(params)", "contents": "ui.newImageMenuItem(${1:params})" },
		 { "trigger": "ui.newTTFLabelMenuItem(params)", "contents": "ui.newTTFLabelMenuItem(${1:params})" },
		 { "trigger": "ui.newBMFontLabel(params)", "contents": "ui.newBMFontLabel(${1:params})" },
		 { "trigger": "ui.newTTFLabel(params)", "contents": "ui.newTTFLabel(${1:params})" },
		 { "trigger": "ui.newTTFLabelWithShadow(params)", "contents": "ui.newTTFLabelWithShadow(${1:params})" },
		 { "trigger": "ui.newTTFLabelWithOutline(params)", "contents": "ui.newTTFLabelWithOutline(${1:params})" },
		 { "trigger": "ui.DEFAULT_TTF_FONT", "contents": "ui.DEFAULT_TTF_FONT" },
		 { "trigger": "ui.DEFAULT_TTF_FONT_SIZE", "contents": "ui.DEFAULT_TTF_FONT_SIZE" },
		 { "trigger": "ui.TEXT_ALIGN_LEFT", "contents": "ui.TEXT_ALIGN_LEFT" },
		 { "trigger": "ui.TEXT_ALIGN_CENTER", "contents": "ui.TEXT_ALIGN_CENTER" },
		 { "trigger": "ui.TEXT_ALIGN_RIGHT", "contents": "ui.TEXT_ALIGN_RIGHT" },
		 { "trigger": "ui.TEXT_VALIGN_TOP", "contents": "ui.TEXT_VALIGN_TOP" },
		 { "trigger": "ui.TEXT_VALIGN_CENTER", "contents": "ui.TEXT_VALIGN_CENTER" },
		 { "trigger": "ui.TEXT_VALIGN_BOTTOM", "contents": "ui.TEXT_VALIGN_BOTTOM" },
		 { "trigger": "TestScrollView.ctor(rect)", "contents": "TestScrollView.ctor(${1:rect})" },
		 { "trigger": "Localize.loadStrings(strings)", "contents": "Localize.loadStrings(${1:strings})" },
		 { "trigger": "Localize.query(key,default)", "contents": "Localize.query(${1:key},${2:default})" },
		 { "trigger": "Localize.filename(filenameOrigin)", "contents": "Localize.filename(${1:filenameOrigin})" },
		 { "trigger": "Localize.strings", "contents": "Localize.strings" },
		 { "trigger": "Localize.strings", "contents": "Localize.strings" },
		 { "trigger": "Timer.new()", "contents": "Timer.new()" },
		 { "trigger": "scheduler.scheduleUpdateGlobal(listener,isPaused)", "contents": "scheduler.scheduleUpdateGlobal(${1:listener},${2:isPaused})" },
		 { "trigger": "scheduler.scheduleGlobal(listener,interval,isPaused)", "contents": "scheduler.scheduleGlobal(${1:listener},${2:interval},${3:isPaused})" },
		 { "trigger": "scheduler.unscheduleGlobal(handle)", "contents": "scheduler.unscheduleGlobal(${1:handle})" },
		 { "trigger": "scheduler.performWithDelayGlobal(listener,time)", "contents": "scheduler.performWithDelayGlobal(${1:listener},${2:time})" },
		 { "trigger": "luaj.callStaticMethod(className,methodName,args,sig)", "contents": "luaj.callStaticMethod(${1:className},${2:methodName},${3:args},${4:sig})" },
		 { "trigger": "GameNetwork.init(providerName,params)", "contents": "GameNetwork.init(${1:providerName},${2:params})" },
		 { "trigger": "GameNetwork.request(command,...)", "contents": "GameNetwork.request(${1:command},${2:...})" },
		 { "trigger": "GameNetwork.show(command,...)", "contents": "GameNetwork.show(${1:command},${2:...})" },
		 { "trigger": "GameNetwork.exit()", "contents": "GameNetwork.exit()" },
		 { "trigger": "CCSpriteExtend.extend(target)", "contents": "CCSpriteExtend.extend(${1:target})" },
		 { "trigger": "CCSpriteExtend.playAnimationOnce(animation,removeWhenFinished,onComplete,delay)", "contents": "CCSpriteExtend.playAnimationOnce(${1:animation},${2:removeWhenFinished},${3:onComplete},${4:delay})" },
		 { "trigger": "CCSpriteExtend.playAnimationForever(animation,isRestoreOriginalFrame,delay)", "contents": "CCSpriteExtend.playAnimationForever(${1:animation},${2:isRestoreOriginalFrame},${3:delay})" },
		 { "trigger": "CCSpriteExtend.autoCleanup()", "contents": "CCSpriteExtend.autoCleanup()" },
		 { "trigger": "CCSpriteExtend.__index", "contents": "CCSpriteExtend.__index" },
		 { "trigger": "RadioButton.ctor(info)", "contents": "RadioButton.ctor(${1:info})" },
		 { "trigger": "RadioButton.selected(b)", "contents": "RadioButton.selected(${1:b})" },
		 { "trigger": "RadioButton.onTap(outerListener)", "contents": "RadioButton.onTap(${1:outerListener})" },
		 { "trigger": "CCShapeNodeExtend.extend(target)", "contents": "CCShapeNodeExtend.extend(${1:target})" },
		 { "trigger": "CCShapeNodeExtend.setColor(r,g,b,a)", "contents": "CCShapeNodeExtend.setColor(${1:r},${2:g},${3:b},${4:a})" },
		 { "trigger": "CCShapeNodeExtend.__index", "contents": "CCShapeNodeExtend.__index" },
		 { "trigger": "CCNodeExtend.extend(target)", "contents": "CCNodeExtend.extend(${1:target})" },
		 { "trigger": "CCNodeExtend.align(anchorPoint,x,y)", "contents": "CCNodeExtend.align(${1:anchorPoint},${2:x},${3:y})" },
		 { "trigger": "CCNodeExtend.pixels(x,y)", "contents": "CCNodeExtend.pixels(${1:x},${2:y})" },
		 { "trigger": "CCNodeExtend.removeFromParentAndCleanup(isCleanup)", "contents": "CCNodeExtend.removeFromParentAndCleanup(${1:isCleanup})" },
		 { "trigger": "CCNodeExtend.removeSelf(isCleanup)", "contents": "CCNodeExtend.removeSelf(${1:isCleanup})" },
		 { "trigger": "CCNodeExtend.scheduleUpdate(callback,priority)", "contents": "CCNodeExtend.scheduleUpdate(${1:callback},${2:priority})" },
		 { "trigger": "CCNodeExtend.schedule(callback,interval)", "contents": "CCNodeExtend.schedule(${1:callback},${2:interval})" },
		 { "trigger": "CCNodeExtend.performWithDelay(callback,delay)", "contents": "CCNodeExtend.performWithDelay(${1:callback},${2:delay})" },
		 { "trigger": "CCNodeExtend.removeAction(action)", "contents": "CCNodeExtend.removeAction(${1:action})" },
		 { "trigger": "CCNodeExtend.stopAllActions()", "contents": "CCNodeExtend.stopAllActions()" },
		 { "trigger": "CCNodeExtend.onEnter()", "contents": "CCNodeExtend.onEnter()" },
		 { "trigger": "CCNodeExtend.onExit()", "contents": "CCNodeExtend.onExit()" },
		 { "trigger": "CCNodeExtend.onEnterTransitionFinish()", "contents": "CCNodeExtend.onEnterTransitionFinish()" },
		 { "trigger": "CCNodeExtend.onExitTransitionStart()", "contents": "CCNodeExtend.onExitTransitionStart()" },
		 { "trigger": "CCNodeExtend.onCleanup()", "contents": "CCNodeExtend.onCleanup()" },
		 { "trigger": "CCNodeExtend.registerNodeEvent(handler)", "contents": "CCNodeExtend.registerNodeEvent(${1:handler})" },
		 { "trigger": "CCNodeExtend.unregisterNodeEvent()", "contents": "CCNodeExtend.unregisterNodeEvent()" },
		 { "trigger": "CCNodeExtend.__index", "contents": "CCNodeExtend.__index" },
		 { "trigger": "ScrollView.ctor(rect,direction)", "contents": "ScrollView.ctor(${1:rect},${2:direction})" },
		 { "trigger": "ScrollView.getCurrentCell()", "contents": "ScrollView.getCurrentCell()" },
		 { "trigger": "ScrollView.getCurrentIndex()", "contents": "ScrollView.getCurrentIndex()" },
		 { "trigger": "ScrollView.setCurrentIndex(index)", "contents": "ScrollView.setCurrentIndex(${1:index})" },
		 { "trigger": "ScrollView.addCell(cell)", "contents": "ScrollView.addCell(${1:cell})" },
		 { "trigger": "ScrollView.insertCellAtIndex(cell,index)", "contents": "ScrollView.insertCellAtIndex(${1:cell},${2:index})" },
		 { "trigger": "ScrollView.removeCellAtIndex(index)", "contents": "ScrollView.removeCellAtIndex(${1:index})" },
		 { "trigger": "ScrollView.getView()", "contents": "ScrollView.getView()" },
		 { "trigger": "ScrollView.getTouchRect()", "contents": "ScrollView.getTouchRect()" },
		 { "trigger": "ScrollView.setTouchRect(rect)", "contents": "ScrollView.setTouchRect(${1:rect})" },
		 { "trigger": "ScrollView.getClippingRect()", "contents": "ScrollView.getClippingRect()" },
		 { "trigger": "ScrollView.setClippingRect(rect)", "contents": "ScrollView.setClippingRect(${1:rect})" },
		 { "trigger": "ScrollView.scrollToCell(index,animated,time,easing)", "contents": "ScrollView.scrollToCell(${1:index},${2:animated},${3:time},${4:easing})" },
		 { "trigger": "ScrollView.isTouchEnabled()", "contents": "ScrollView.isTouchEnabled()" },
		 { "trigger": "ScrollView.setTouchEnabled(enabled)", "contents": "ScrollView.setTouchEnabled(${1:enabled})" },
		 { "trigger": "ScrollView.onTouchBegan(x,y)", "contents": "ScrollView.onTouchBegan(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouchMoved(x,y)", "contents": "ScrollView.onTouchMoved(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouchEnded(x,y)", "contents": "ScrollView.onTouchEnded(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouchEndedWithTap(x,y)", "contents": "ScrollView.onTouchEndedWithTap(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouchEndedWithoutTap(x,y)", "contents": "ScrollView.onTouchEndedWithoutTap(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouchCancelled(x,y)", "contents": "ScrollView.onTouchCancelled(${1:x},${2:y})" },
		 { "trigger": "ScrollView.onTouch(event,x,y)", "contents": "ScrollView.onTouch(${1:event},${2:x},${3:y})" },
		 { "trigger": "ScrollView.reorderAllCells()", "contents": "ScrollView.reorderAllCells()" },
		 { "trigger": "ScrollView.setContentOffset(offset,animated,time,easing)", "contents": "ScrollView.setContentOffset(${1:offset},${2:animated},${3:time},${4:easing})" },
		 { "trigger": "ScrollView.onExit()", "contents": "ScrollView.onExit()" },
		 { "trigger": "ScrollView.DIRECTION_VERTICAL", "contents": "ScrollView.DIRECTION_VERTICAL" },
		 { "trigger": "ScrollView.DIRECTION_HORIZONTAL", "contents": "ScrollView.DIRECTION_HORIZONTAL" },
		 { "trigger": "BaseButton.ctor(info)", "contents": "BaseButton.ctor(${1:info})" },
		 { "trigger": "BaseButton.onTap(outerListener)", "contents": "BaseButton.onTap(${1:outerListener})" },
		 { "trigger": "EventProtocol.extend(object)", "contents": "EventProtocol.extend(${1:object})" },
		 { "trigger": "json.encode(var,isDebug)", "contents": "json.encode(${1:var},${2:isDebug})" },
		 { "trigger": "json.decode(text,isDebug)", "contents": "json.decode(${1:text},${2:isDebug})" },
		 { "trigger": "audio.disable()", "contents": "audio.disable()" },
		 { "trigger": "audio.enable()", "contents": "audio.enable()" },
		 { "trigger": "audio.getMusicVolume()", "contents": "audio.getMusicVolume()" },
		 { "trigger": "audio.setMusicVolume(volume)", "contents": "audio.setMusicVolume(${1:volume})" },
		 { "trigger": "audio.getSoundsVolume()", "contents": "audio.getSoundsVolume()" },
		 { "trigger": "audio.setSoundsVolume(volume)", "contents": "audio.setSoundsVolume(${1:volume})" },
		 { "trigger": "audio.preloadMusic(filename)", "contents": "audio.preloadMusic(${1:filename})" },
		 { "trigger": "audio.playMusic(filename,isLoop)", "contents": "audio.playMusic(${1:filename},${2:isLoop})" },
		 { "trigger": "audio.stopMusic(isReleaseData)", "contents": "audio.stopMusic(${1:isReleaseData})" },
		 { "trigger": "audio.pauseMusic()", "contents": "audio.pauseMusic()" },
		 { "trigger": "audio.resumeMusic()", "contents": "audio.resumeMusic()" },
		 { "trigger": "audio.rewindMusic()", "contents": "audio.rewindMusic()" },
		 { "trigger": "audio.willPlayMusic()", "contents": "audio.willPlayMusic()" },
		 { "trigger": "audio.isMusicPlaying()", "contents": "audio.isMusicPlaying()" },
		 { "trigger": "audio.playSound(filename,isLoop)", "contents": "audio.playSound(${1:filename},${2:isLoop})" },
		 { "trigger": "audio.pauseSound(handle)", "contents": "audio.pauseSound(${1:handle})" },
		 { "trigger": "audio.pauseAllSounds()", "contents": "audio.pauseAllSounds()" },
		 { "trigger": "audio.resumeSound(handle)", "contents": "audio.resumeSound(${1:handle})" },
		 { "trigger": "audio.resumeAllSounds(handle)", "contents": "audio.resumeAllSounds(${1:handle})" },
		 { "trigger": "audio.stopSound(handle)", "contents": "audio.stopSound(${1:handle})" },
		 { "trigger": "audio.stopAllSounds()", "contents": "audio.stopAllSounds()" },
		 { "trigger": "audio.preloadSound(filename)", "contents": "audio.preloadSound(${1:filename})" },
		 { "trigger": "audio.unloadSound(filename)", "contents": "audio.unloadSound(${1:filename})" },
		 { "trigger": "audio.getBackgroundMusicVolume", "contents": "audio.getBackgroundMusicVolume" },
		 { "trigger": "audio.setBackgroundMusicVolume", "contents": "audio.setBackgroundMusicVolume" },
		 { "trigger": "audio.getEffectsVolume", "contents": "audio.getEffectsVolume" },
		 { "trigger": "audio.setEffectsVolume", "contents": "audio.setEffectsVolume" },
		 { "trigger": "audio.preloadBackgroundMusic", "contents": "audio.preloadBackgroundMusic" },
		 { "trigger": "audio.playBackgroundMusic", "contents": "audio.playBackgroundMusic" },
		 { "trigger": "audio.stopBackgroundMusic", "contents": "audio.stopBackgroundMusic" },
		 { "trigger": "audio.pauseBackgroundMusic", "contents": "audio.pauseBackgroundMusic" },
		 { "trigger": "audio.resumeBackgroundMusic", "contents": "audio.resumeBackgroundMusic" },
		 { "trigger": "audio.rewindBackgroundMusic", "contents": "audio.rewindBackgroundMusic" },
		 { "trigger": "audio.willPlayBackgroundMusic", "contents": "audio.willPlayBackgroundMusic" },
		 { "trigger": "audio.isBackgroundMusicPlaying", "contents": "audio.isBackgroundMusicPlaying" },
		 { "trigger": "audio.playEffect", "contents": "audio.playEffect" },
		 { "trigger": "audio.pauseEffect", "contents": "audio.pauseEffect" },
		 { "trigger": "audio.pauseAllEffects", "contents": "audio.pauseAllEffects" },
		 { "trigger": "audio.resumeEffect", "contents": "audio.resumeEffect" },
		 { "trigger": "audio.resumeAllEffects", "contents": "audio.resumeAllEffects" },
		 { "trigger": "audio.stopEffect", "contents": "audio.stopEffect" },
		 { "trigger": "audio.stopAllEffects", "contents": "audio.stopAllEffects" },
		 { "trigger": "audio.preloadEffect", "contents": "audio.preloadEffect" },
		 { "trigger": "audio.unloadEffect", "contents": "audio.unloadEffect" },
		 { "trigger": "crypto.encryptAES256(plaintext,key)", "contents": "crypto.encryptAES256(${1:plaintext},${2:key})" },
		 { "trigger": "crypto.decryptAES256(ciphertext,key)", "contents": "crypto.decryptAES256(${1:ciphertext},${2:key})" },
		 { "trigger": "crypto.encodeBase64(plaintext)", "contents": "crypto.encodeBase64(${1:plaintext})" },
		 { "trigger": "crypto.decodeBase64(ciphertext)", "contents": "crypto.decodeBase64(${1:ciphertext})" },
		 { "trigger": "crypto.md5(input,isRawOutput)", "contents": "crypto.md5(${1:input},${2:isRawOutput})" },
		 { "trigger": "luaoc.callStaticMethod(className,methodName,args)", "contents": "luaoc.callStaticMethod(${1:className},${2:methodName},${3:args})" },
		 { "trigger": "Store.init(listener)", "contents": "Store.init(${1:listener})" },
		 { "trigger": "Store.getReceiptVerifyMode()", "contents": "Store.getReceiptVerifyMode()" },
		 { "trigger": "Store.setReceiptVerifyMode(mode,isSandbox)", "contents": "Store.setReceiptVerifyMode(${1:mode},${2:isSandbox})" },
		 { "trigger": "Store.getReceiptVerifyServerUrl()", "contents": "Store.getReceiptVerifyServerUrl()" },
		 { "trigger": "Store.setReceiptVerifyServerUrl(url)", "contents": "Store.setReceiptVerifyServerUrl(${1:url})" },
		 { "trigger": "Store.canMakePurchases()", "contents": "Store.canMakePurchases()" },
		 { "trigger": "Store.loadProducts(productsId,listener)", "contents": "Store.loadProducts(${1:productsId},${2:listener})" },
		 { "trigger": "Store.cancelLoadProducts()", "contents": "Store.cancelLoadProducts()" },
		 { "trigger": "Store.isProductLoaded(productId)", "contents": "Store.isProductLoaded(${1:productId})" },
		 { "trigger": "Store.purchase(productId)", "contents": "Store.purchase(${1:productId})" },
		 { "trigger": "Store.finishTransaction(transaction)", "contents": "Store.finishTransaction(${1:transaction})" },
		 { "trigger": "ModelBase.ctor(properties)", "contents": "ModelBase.ctor(${1:properties})" },
		 { "trigger": "ModelBase.getId()", "contents": "ModelBase.getId()" },
		 { "trigger": "ModelBase.isValidId()", "contents": "ModelBase.isValidId()" },
		 { "trigger": "ModelBase.setProperties(properties)", "contents": "ModelBase.setProperties(${1:properties})" },
		 { "trigger": "ModelBase.getProperties(fields,filter)", "contents": "ModelBase.getProperties(${1:fields},${2:filter})" },
		 { "trigger": "ModelBase.idkey", "contents": "ModelBase.idkey" },
		 { "trigger": "ModelBase.schema", "contents": "ModelBase.schema" },
		 { "trigger": "ModelBase.fields", "contents": "ModelBase.fields" },
		 { "trigger": "device.showActivityIndicator()", "contents": "device.showActivityIndicator()" },
		 { "trigger": "device.hideActivityIndicator()", "contents": "device.hideActivityIndicator()" },
		 { "trigger": "device.showAlert(title,message,buttonLabels,listener)", "contents": "device.showAlert(${1:title},${2:message},${3:buttonLabels},${4:listener})" },
		 { "trigger": "device.cancelAlert()", "contents": "device.cancelAlert()" },
		 { "trigger": "device.getOpenUDID()", "contents": "device.getOpenUDID()" },
		 { "trigger": "device.openURL(url)", "contents": "device.openURL(${1:url})" },
		 { "trigger": "device.showInputBox(title,message,defaultValue)", "contents": "device.showInputBox(${1:title},${2:message},${3:defaultValue})" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.language", "contents": "device.language" },
		 { "trigger": "device.writeablePath", "contents": "device.writeablePath" },
		 { "trigger": "device.documentsPath", "contents": "device.documentsPath" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.language", "contents": "device.language" },
		 { "trigger": "device.writeablePath", "contents": "device.writeablePath" },
		 { "trigger": "device.documentsPath", "contents": "device.documentsPath" },
		 { "trigger": "game.startup()", "contents": "game.startup()" },
		 { "trigger": "game.exit()", "contents": "game.exit()" },
		 { "trigger": "game.benchmark()", "contents": "game.benchmark()" },
		 { "trigger": "TestScene.ctor()", "contents": "TestScene.ctor()" },
		 { "trigger": "TestScene.onTouch(event,x,y)", "contents": "TestScene.onTouch(${1:event},${2:x},${3:y})" },
		 { "trigger": "TestScene.onTouch2(event,x,y)", "contents": "TestScene.onTouch2(${1:event},${2:x},${3:y})" },
		 { "trigger": "TestScene.onEnterFrame(dt)", "contents": "TestScene.onEnterFrame(${1:dt})" },
		 { "trigger": "TestScene.onEnter()", "contents": "TestScene.onEnter()" },
    
            {}
        ]
    }